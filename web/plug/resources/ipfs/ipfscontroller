#!/bin/bash

IPFSPATH="/etc/cloudy/ipfs/"
IPFSINFO="ipfs.info"
IPFSBINPATH="/usr/local/bin/"
IPFSBIN="ipfs"
SERVICEDIR="services/"
LOGFILE="/dev/null"
IPFSUSER="nobody"
IPFSINFOFILE="ipfs.info"
CONFIG="config"
TMPCONFIG="tmpconfig"
IPFSLOG="ipfs-daemon.log"
BOOTSTRAP="/ip4/10.139.40.122/tcp/4001/ipfs/QmUFGx2aum3ZcBzWNpwFFvKGCoNzhTGb3bgCo4sixkWKm8"
INITDIPFS="/etc/init.d/cloudy-ipfs"
PIDFILE="/var/run/cloudy-ipfs.pid"

doInstall() {
	if isInstalled
	then
		echo "IPFS is already installed."
	else
		doDownload
	fi

	if isConfigured
	then
		echo "IPFS is already configured."
		return
	else
		doInit
	fi


}

doDownload() {
	mkdir -p $IPFSBINPATH
	ipfstarball="/tmp/go-ipfs.tar.gz"
	wget -O $ipfstarball https://dist.ipfs.io/go-ipfs/v0.4.11/go-ipfs_v0.4.11_linux-amd64.tar.gz
	tar -C /tmp/ -xvzf $ipfstarball
	chmod +x /tmp/go-ipfs/ipfs
	mv /tmp/go-ipfs/ipfs $IPFSBINPATH
	rm -rf /tmp/go-ipfs $ipfstarball
}

doInit() {
	if isInstalled
	then
		mkdir -p $IPFSPATH
		mkdir -p $IPFSPATH$SERVICEDIR
		export IPFS_PATH=$IPFSPATH
		chmod 755 $IPFSPATH && cd $IPFSPATH
		$IPFSBIN init > $IPFSPATH$IPFSLOG 2>&1
		clearBootstrap && addBootstrapNode $BOOTSTRAP
		clearMDNSDiscovery
		cd -> /dev/null
	fi
	ipfsid=$(cat $IPFSPATH$CONFIG | grep '"PeerID":' | cut -d':' -f2 | cut -d' ' -f2 | cut -d '"' -f2)
	echo 'IPFS plublic ID: '$ipfsid
}

clearBootstrap(){
	jq '.Bootstrap |= []' $IPFSPATH$CONFIG > $IPFSPATH$TMPCONFIG
	mv $IPFSPATH$TMPCONFIG $IPFSPATH$CONFIG
}

clearMDNSDiscovery(){
	jq '.Discovery.MDNS.Enabled |= false' $IPFSPATH$CONFIG > $IPFSPATH$TMPCONFIG
	mv $IPFSPATH$TMPCONFIG $IPFSPATH$CONFIG
}

addBootstrapNode() {
	jq '.Bootstrap += ["'$BOOTSTRAP'"]' $IPFSPATH$CONFIG > $IPFSPATH$TMPCONFIG
	mv $IPFSPATH$TMPCONFIG $IPFSPATH$CONFIG
}

doServer(){
    local port=${1:-"5001"}
    local description=${2:-"IPFS"}
    local ip=${3:-"0.0.0.0"}

    # export IPFS_PATH=$IPFSPATH
    # # Creating directory with nobody permissions
    # # mkdir -p "/var/local/ipfs" && cd "/var/local/ipfs"
    # # chmod 777 "/var/local/ipfs" && cd "/var/local/ipfs"
    # cd $IPFSPATH
    # # Running ipfs
    # $IPFSBINPATH$IPFSBIN daemon > $IPFSPATH$IPFSLOG 2>&1 &
    # pidipfs=$!
    # #  cmd='su '$IPFSUSER' -c "{ '$IPFSPATH$IPFSPROG' daemon > 'thingcalledlog' 2>&1 & }; echo \$!"'
    # #  pidipfs=$(eval $cmd)          # keeping PID for future needs...

    # # Using the PID, we could carry on process control so if the ipfs process die, we can also
    # # stop the avahi process to avoid "false connections"

    # Start IPFS via init.d script
    # TODO: manage failed starts
    [ -f $INITDIPFS ] && { $INITDIPFS start > /dev/null 2>&1 ; }

    # Save daemon info
    #[ -f $PIDFILE ] && echo "$(cat $PIDFILE) http://$ip:$port" > $IPFSPATH$IPFSINFOFILE
    pid="$(cat $PIDFILE)"
    info="$pid http://$ip:$port"
    echo $info > $IPFSPATH$IPFSINFOFILE
    echo $info
    return 0
}

doStop() {
    # # Stopping ipfs node
    # ipfspid=$(cat $IPFSPATH$IPFSINFOFILE | cut -d' ' -f1)
    # kill $ipfspid

    [ -f $INITDIPFS ] && $INITDIPFS stop

    # Removing info file
    [ -f $INITDIPFS ]
    echo $IPFSPATH$IPFSINFOFILE
    rm $IPFSPATH$IPFSINFOFILE
}

doHelp() {
    echo "This is a script that installs and configures IPFS in Cloudy"
}

isInstalled() {
	[ -e $IPFSBINPATH$IPFSBIN ] && return 0
	return 1
}

isConfigured() {
	[ -e $IPFSPATH$CONFIG ] && return 0
	return 1
}

if [ $# -lt 1 ]
then
    doHelp
fi

case $1 in
    "install")
        shift
        doInstall $@
        ;;
    "initialize")
        shift
        doInit $@
        ;;
    "startDaemon")
        shift
        doServer $@
        ;;
    "publish")
        shift
        doServer $@
        ;;
    "stop")
				shift
				doStop $@
				;;
esac
